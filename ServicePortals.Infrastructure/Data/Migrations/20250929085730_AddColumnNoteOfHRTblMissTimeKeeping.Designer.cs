// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicePortals.Infrastructure.Data;

#nullable disable

namespace ServicePortals.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929085730_AddColumnNoteOfHRTblMissTimeKeeping")]
    partial class AddColumnNoteOfHRTblMissTimeKeeping
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateRegister")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("MetaData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("OrgUnitCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOverTimeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCodeCreatedForm")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserNameCreatedForm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id");

                    b.HasIndex("OrgPositionId");

                    b.HasIndex("OrgUnitCompanyId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("TypeOverTimeId");

                    b.ToTable("application_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationFormItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationFormId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RejectedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("Id");

                    b.ToTable("application_form_items");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApprovalFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrgPositionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("PositonContext")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<int?>("ToOrgPositionId")
                        .HasColumnType("int");

                    b.Property<string>("ToSpecificUserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("approval_flows");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AssignedTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("assigned_tasks");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("attach_files");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("cost_centers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "V1013202",
                            Description = "MIS"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Delegations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FromOrgPositionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCodeDelegation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("delegations");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.HistoryApplicationForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("ActionAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ApplicationFormId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCodeAction")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserNameAction")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("history_application_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("it_categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SERVER",
                            Name = "Server Login Id"
                        },
                        new
                        {
                            Id = 2,
                            Code = "NETWORK",
                            Name = "Network device"
                        },
                        new
                        {
                            Id = 3,
                            Code = "EMAIL",
                            Name = "Email"
                        },
                        new
                        {
                            Id = 4,
                            Code = "SOFTWARE",
                            Name = "Software Installation"
                        },
                        new
                        {
                            Id = 5,
                            Code = "SAP",
                            Name = "SAP Form"
                        },
                        new
                        {
                            Id = 6,
                            Code = "OTHER",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("ActualCompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ApplicationFormItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NoteManagerIT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("RequiredCompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TargetCompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormItemId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PriorityId");

                    b.ToTable("it_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITFormCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ITCategoryId")
                        .HasColumnType("int");

                    b.Property<long>("ITFormId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ITCategoryId");

                    b.HasIndex("ITFormId");

                    b.ToTable("it_form_categories");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationFormItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HaveSalary")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NoteOfHR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeLeaveId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TypeLeaveId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormItemId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id");

                    b.HasIndex("TimeLeaveId");

                    b.HasIndex("TypeLeaveId");

                    b.ToTable("leave_requests");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationFormItemId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ApplyAllDepartment")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormItemId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("memo_notifications");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotificationDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<long>("MemoNotificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemoNotificationId", "DepartmentId");

                    b.ToTable("memo_notification_departments");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MissTimeKeeping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalIn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AdditionalOut")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ApplicationFormItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateRegister")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FacialRecognitionIn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FacialRecognitionOut")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GateIn")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GateOut")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NoteOfHR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Shift")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormItemId");

                    b.ToTable("miss_timekeepings");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsStaff")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentOrgPositionId")
                        .HasColumnType("int");

                    b.Property<string>("PositionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("ParentOrgPositionId");

                    b.HasIndex("UnitId");

                    b.ToTable("org_positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsStaff = true,
                            Name = "General Director",
                            OrgUnitId = 6,
                            PositionCode = "GD",
                            UnitId = 5
                        },
                        new
                        {
                            Id = 2,
                            IsStaff = true,
                            Name = "AM General Director",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "AM_GD",
                            UnitId = 5
                        },
                        new
                        {
                            Id = 3,
                            IsStaff = true,
                            Name = "BD General Manager",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "BDGM",
                            UnitId = 5
                        },
                        new
                        {
                            Id = 4,
                            IsStaff = true,
                            Name = "Finance General Manage",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "FGM",
                            UnitId = 5
                        },
                        new
                        {
                            Id = 5,
                            IsStaff = true,
                            Name = "Operations General Manager",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "OGM",
                            UnitId = 5
                        },
                        new
                        {
                            Id = 6,
                            IsStaff = true,
                            Name = "Operations Manager",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "OM",
                            UnitId = 5
                        },
                        new
                        {
                            Id = 7,
                            IsStaff = true,
                            Name = "Manager Admin",
                            OrgUnitId = 7,
                            ParentOrgPositionId = 1,
                            PositionCode = "ADMIN-MGR",
                            UnitId = 5
                        },
                        new
                        {
                            Id = 8,
                            IsStaff = true,
                            Name = "Manager MIS/IT",
                            OrgUnitId = 9,
                            ParentOrgPositionId = 5,
                            PositionCode = "MIS-MGR",
                            UnitId = 6
                        },
                        new
                        {
                            Id = 9,
                            IsStaff = true,
                            Name = "Staff IT",
                            OrgUnitId = 9,
                            ParentOrgPositionId = 8,
                            PositionCode = "MIS-Staff",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 10,
                            IsStaff = true,
                            Name = "Manager Commercial",
                            OrgUnitId = 11,
                            ParentOrgPositionId = 3,
                            PositionCode = "COM-MGR",
                            UnitId = 6
                        },
                        new
                        {
                            Id = 11,
                            IsStaff = true,
                            Name = "Assistant Manager Commercial",
                            OrgUnitId = 11,
                            ParentOrgPositionId = 10,
                            PositionCode = "COM-AM",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 12,
                            IsStaff = true,
                            Name = "Staff Commercial",
                            OrgUnitId = 11,
                            ParentOrgPositionId = 10,
                            PositionCode = "COM-Staff",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 13,
                            IsStaff = true,
                            Name = "Manager HR",
                            OrgUnitId = 10,
                            ParentOrgPositionId = 1,
                            PositionCode = "HR-MGR",
                            UnitId = 6
                        },
                        new
                        {
                            Id = 14,
                            IsStaff = true,
                            Name = "Assistant Manager HR",
                            OrgUnitId = 10,
                            ParentOrgPositionId = 7,
                            PositionCode = "HR-AM",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 15,
                            IsStaff = true,
                            Name = "Staff HR",
                            OrgUnitId = 10,
                            ParentOrgPositionId = 14,
                            PositionCode = "HR-Staff",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 16,
                            IsStaff = true,
                            Name = "Manager Purchasing",
                            OrgUnitId = 12,
                            ParentOrgPositionId = 5,
                            PositionCode = "PUR-MGR",
                            UnitId = 6
                        },
                        new
                        {
                            Id = 17,
                            IsStaff = true,
                            Name = "Assistant Manager Purchasing",
                            OrgUnitId = 12,
                            ParentOrgPositionId = 16,
                            PositionCode = "PUR-AM",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 18,
                            IsStaff = true,
                            Name = "Staff Purchasing",
                            OrgUnitId = 12,
                            ParentOrgPositionId = 16,
                            PositionCode = "PUR-Staff",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 19,
                            IsStaff = true,
                            Name = "Manager Production",
                            OrgUnitId = 8,
                            ParentOrgPositionId = 5,
                            PositionCode = "PRD-MGR",
                            UnitId = 6
                        },
                        new
                        {
                            Id = 20,
                            IsStaff = false,
                            Name = "Supervisor Tech A_AGH",
                            OrgUnitId = 18,
                            ParentOrgPositionId = 19,
                            PositionCode = "PRD-SUP-AGH",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 21,
                            IsStaff = false,
                            Name = "Supervisor Tech B_BCDEF",
                            OrgUnitId = 19,
                            ParentOrgPositionId = 19,
                            PositionCode = "PRD-SUP-BBCDEF",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 22,
                            IsStaff = false,
                            Name = "Supervisor Shift A",
                            OrgUnitId = 14,
                            ParentOrgPositionId = 19,
                            PositionCode = "PRD-SUP-SHIFT-A",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 23,
                            IsStaff = false,
                            Name = "Supervisor Shift B",
                            OrgUnitId = 17,
                            ParentOrgPositionId = 19,
                            PositionCode = "PRD-SUP-SHIFT-B",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 24,
                            IsStaff = false,
                            Name = "Leader 12A_A",
                            OrgUnitId = 14,
                            ParentOrgPositionId = 22,
                            PositionCode = "PRD-L-12AA",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 25,
                            IsStaff = false,
                            Name = "Operator 12A_A",
                            OrgUnitId = 14,
                            ParentOrgPositionId = 24,
                            PositionCode = "PRD-OP-12AA",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 26,
                            IsStaff = false,
                            Name = "Leader 12A_B",
                            OrgUnitId = 15,
                            ParentOrgPositionId = 22,
                            PositionCode = "PRD-L-12AB",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 27,
                            IsStaff = false,
                            Name = "Operator 12A_B",
                            OrgUnitId = 15,
                            ParentOrgPositionId = 26,
                            PositionCode = "PRD-OP-12AB",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 28,
                            IsStaff = false,
                            Name = "Leader 12B_A",
                            OrgUnitId = 16,
                            ParentOrgPositionId = 23,
                            PositionCode = "PRD-L-12BA",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 29,
                            IsStaff = false,
                            Name = "Operator 12B_A",
                            OrgUnitId = 16,
                            ParentOrgPositionId = 28,
                            PositionCode = "PRD-OP-12BA",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 30,
                            IsStaff = false,
                            Name = "Leader 12B_H",
                            OrgUnitId = 17,
                            ParentOrgPositionId = 23,
                            PositionCode = "PRD-L-12BH",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 31,
                            IsStaff = false,
                            Name = "Operator 12B_H",
                            OrgUnitId = 17,
                            ParentOrgPositionId = 30,
                            PositionCode = "PRD-OP-12BH",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 32,
                            IsStaff = false,
                            Name = "Technician A_AGH",
                            OrgUnitId = 18,
                            ParentOrgPositionId = 20,
                            PositionCode = "PRD-TECH-AAH",
                            UnitId = 0
                        },
                        new
                        {
                            Id = 33,
                            IsStaff = false,
                            Name = "Technician B_BCDEF",
                            OrgUnitId = 19,
                            ParentOrgPositionId = 21,
                            PositionCode = "PRD-TECH-BCDEF",
                            UnitId = 0
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentOrgUnitId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrgUnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("org_units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "VS Industry VietNam",
                            UnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business Development",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finance & Admin",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Operations",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "VS Technology",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "General Manager",
                            ParentOrgUnitId = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Admin",
                            ParentOrgUnitId = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "Production",
                            ParentOrgUnitId = 4,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "MIS",
                            ParentOrgUnitId = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "HR",
                            ParentOrgUnitId = 3,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "Commercial",
                            ParentOrgUnitId = 2,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "Purchasing",
                            ParentOrgUnitId = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 13,
                            Name = "Production_VPSX",
                            ParentOrgUnitId = 8,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 14,
                            Name = "12A_A",
                            ParentOrgUnitId = 8,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 15,
                            Name = "12A_B",
                            ParentOrgUnitId = 8,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 16,
                            Name = "12B_A",
                            ParentOrgUnitId = 8,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 17,
                            Name = "12B_H",
                            ParentOrgUnitId = 8,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kỹ thuật A_AGH",
                            ParentOrgUnitId = 8,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kỹ thuật B_BCDEF",
                            ParentOrgUnitId = 8,
                            UnitId = 4
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OverTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationFormItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromHour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteOfHR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberHour")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToHour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormItemId");

                    b.ToTable("over_times");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Group = "TIME_KEEPING",
                            Name = "time_keeping.mng_time_keeping"
                        },
                        new
                        {
                            Id = 2,
                            Group = "LEAVE_REQUEST",
                            Name = "leave_request.hr_management_leave_request"
                        },
                        new
                        {
                            Id = 3,
                            Group = "MEMO_NOTIFICATION",
                            Name = "memo_notification.create"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NameE")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Thấp",
                            NameE = "Low"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trung bình",
                            NameE = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cao",
                            NameE = "High"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Purchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationFormItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RequestedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormItemId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("purchases");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.PurchaseDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PurchaseId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("RequiredDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UnitMeasurement")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("purchase_details");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token");

                    b.HasIndex("UserCode");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("request_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chờ duyệt",
                            NameE = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Đang xử lý",
                            NameE = "IN_PROCESS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hoàn thành",
                            NameE = "COMPLETED"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chờ HR",
                            NameE = "WAIT_HR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Từ chối",
                            NameE = "REJECTED"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Duyệt cuối cùng",
                            NameE = "FINAL_APPROVAL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Đã giao",
                            NameE = "ASSIGNED"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameE")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("request_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nghỉ phép",
                            NameE = "Leave request"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Thông báo",
                            NameE = "Memo Notification"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Form IT",
                            NameE = "Form IT"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mua bán",
                            NameE = "Purchase"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SUPERADMIN",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "HR",
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Code = "IT",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 4,
                            Code = "UNION",
                            Name = "Union"
                        },
                        new
                        {
                            Id = 5,
                            Code = "USER",
                            Name = "User"
                        },
                        new
                        {
                            Id = 6,
                            Code = "GM",
                            Name = "GM"
                        },
                        new
                        {
                            Id = 7,
                            Code = "HR_MANAGER",
                            Name = "HR_Manager"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.SystemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaxValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("system_configs");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TimeAttendanceEditHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrentValue")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("Datetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsSentToHR")
                        .HasColumnType("bit");

                    b.Property<string>("OldValue")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserCodeUpdated")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("time_attendance_edit_histories");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TimeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameE")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("time_leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cả Ngày",
                            NameE = "All Day"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buổi sáng",
                            NameE = "Morning"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Buổi chiều",
                            NameE = "Afternoon"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TypeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NameE")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("type_leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AL",
                            Name = "Nghỉ Phép Năm",
                            NameE = "Annual Leave"
                        },
                        new
                        {
                            Id = 2,
                            Code = "NPL",
                            Name = "Nghỉ Việc Cá Nhân",
                            NameE = "Unpaid Leave"
                        },
                        new
                        {
                            Id = 3,
                            Code = "MC",
                            Name = "Nghỉ Ốm",
                            NameE = "Sick Leave"
                        },
                        new
                        {
                            Id = 4,
                            Code = "ML",
                            Name = "Nghỉ Cưới",
                            NameE = "Wedding Leave"
                        },
                        new
                        {
                            Id = 5,
                            Code = "ACC",
                            Name = "Nghỉ TNLĐ",
                            NameE = "Accident Leave"
                        },
                        new
                        {
                            Id = 6,
                            Code = "PL",
                            Name = "Nghỉ Vợ Sinh",
                            NameE = "Paternity Leave"
                        },
                        new
                        {
                            Id = 7,
                            Code = "MAT",
                            Name = "Nghỉ Đẻ",
                            NameE = "Maternity Leave"
                        },
                        new
                        {
                            Id = 8,
                            Code = "UL",
                            Name = "Nghỉ Bù",
                            NameE = "Compensatory Leave"
                        },
                        new
                        {
                            Id = 9,
                            Code = "COMP",
                            Name = "Nghỉ Tang Lễ",
                            NameE = "Funeral Leave"
                        },
                        new
                        {
                            Id = 10,
                            Code = "WO",
                            Name = "Làm Ở Ngoài",
                            NameE = "Working Outside"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TypeOverTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NameE")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("type_over_times");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Từ thứ 2 đến thứ 7",
                            NameE = "Form monday to saturday"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chủ nhật",
                            NameE = "Sunday"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ngày lễ",
                            NameE = "Holiday"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Company"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manage Department"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Department"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Team"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GM"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 7,
                            Name = "AM"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "superadmin@vsvn.com.vn",
                            IsActive = true,
                            IsChangePassword = true,
                            Password = "$2a$12$GAJGsDDQUCEPfSqOLbPwmu5agSkYoaH6eUzLPJLRx2hnA89LSkiey",
                            Phone = "0999999999",
                            UserCode = "0"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Key")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Value")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode");

                    b.ToTable("user_configs");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserMngOrgUnitId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ManagementType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("user_mng_org_unit_id");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserCode", "PermissionId");

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCode", "RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserCode = "0"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnitCompany")
                        .WithMany()
                        .HasForeignKey("OrgUnitCompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.RequestStatus", "RequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicePortals.Domain.Entities.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicePortals.Domain.Entities.TypeOverTime", "TypeOverTime")
                        .WithMany()
                        .HasForeignKey("TypeOverTimeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OrgUnit");

                    b.Navigation("OrgUnitCompany");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("TypeOverTime");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationFormItem", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("ApplicationFormItems")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AssignedTask", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", null)
                        .WithMany("AssignedTasks")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFile", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.HistoryApplicationForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("HistoryApplicationForms")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationFormItem", "ApplicationFormItem")
                        .WithMany("ITForms")
                        .HasForeignKey("ApplicationFormItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationFormItem");

                    b.Navigation("OrgUnit");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITFormCategory", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ITCategory", "ITCategory")
                        .WithMany()
                        .HasForeignKey("ITCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicePortals.Domain.Entities.ITForm", "ITForm")
                        .WithMany("ItFormCategories")
                        .HasForeignKey("ITFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ITCategory");

                    b.Navigation("ITForm");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationFormItem", "ApplicationFormItem")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("ApplicationFormItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.TimeLeave", "TimeLeave")
                        .WithMany()
                        .HasForeignKey("TimeLeaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.TypeLeave", "TypeLeave")
                        .WithMany()
                        .HasForeignKey("TypeLeaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationFormItem");

                    b.Navigation("OrgUnit");

                    b.Navigation("TimeLeave");

                    b.Navigation("TypeLeave");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationFormItem", "ApplicationFormItem")
                        .WithMany("MemoNotifications")
                        .HasForeignKey("ApplicationFormItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationFormItem");

                    b.Navigation("OrgUnit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotificationDepartment", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ServicePortals.Domain.Entities.MemoNotification", "MemoNotifications")
                        .WithMany("MemoNotificationDepartments")
                        .HasForeignKey("MemoNotificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MemoNotifications");

                    b.Navigation("OrgUnit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MissTimeKeeping", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationFormItem", "ApplicationFormItem")
                        .WithMany("MissTimeKeepings")
                        .HasForeignKey("ApplicationFormItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationFormItem");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgPosition", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServicePortals.Domain.Entities.OrgPosition", "ParentOrgPosition")
                        .WithMany()
                        .HasForeignKey("ParentOrgPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServicePortals.Domain.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrgUnit");

                    b.Navigation("ParentOrgPosition");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgUnit", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "ParentOrgUnit")
                        .WithMany("Children")
                        .HasForeignKey("ParentOrgUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServicePortals.Domain.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentOrgUnit");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OverTime", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationFormItem", "ApplicationFormItem")
                        .WithMany("OverTimes")
                        .HasForeignKey("ApplicationFormItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationFormItem");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationFormItem", "ApplicationFormItem")
                        .WithMany("Purchases")
                        .HasForeignKey("ApplicationFormItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationFormItem");

                    b.Navigation("OrgUnit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ServicePortals.Domain.Entities.Purchase", null)
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CostCenter");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserConfig", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserConfigs")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.Navigation("ApplicationFormItems");

                    b.Navigation("AssignedTasks");

                    b.Navigation("HistoryApplicationForms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationFormItem", b =>
                {
                    b.Navigation("ITForms");

                    b.Navigation("LeaveRequests");

                    b.Navigation("MemoNotifications");

                    b.Navigation("MissTimeKeepings");

                    b.Navigation("OverTimes");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITForm", b =>
                {
                    b.Navigation("ItFormCategories");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.Navigation("MemoNotificationDepartments");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgUnit", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Navigation("UserConfigs");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
