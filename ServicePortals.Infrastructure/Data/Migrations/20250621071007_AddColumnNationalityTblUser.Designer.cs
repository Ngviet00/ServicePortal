// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicePortals.Infrastructure.Data;

#nullable disable

namespace ServicePortals.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250621071007_AddColumnNationalityTblUser")]
    partial class AddColumnNationalityTblUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApprovalAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApprovalRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApproverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApproverUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Id", "ApprovalRequestId", "ApproverUserCode");

                    b.ToTable("approval_actions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApprovalFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("FromPosition")
                        .HasColumnType("int");

                    b.Property<int?>("StepOrder")
                        .HasColumnType("int");

                    b.Property<int?>("ToPosition")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("approval_flows");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApprovalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CurrentPositionId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequesterUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequesterUserCode", "RequestId", "CurrentPositionId", "RequestType");

                    b.ToTable("approval_requests");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFileRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("RefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttachFileId", "RefId", "RefType");

                    b.ToTable("attach_file_relations");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFiles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("attach_files");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.HrManagements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("hr_managements");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("HaveSalary")
                        .HasColumnType("tinyint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TimeLeave")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TypeLeave")
                        .HasColumnType("int");

                    b.Property<string>("WriteLeaveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriteLeaveUserCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "RequesterUserCode");

                    b.ToTable("leave_requests");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ApplyAllDepartment")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCodeCreated")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromDate", "ToDate", "CreatedByDepartmentId", "UserCodeCreated");

                    b.ToTable("memo_notifications");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotificationDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MemoNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemoNotificationId", "DepartmentId");

                    b.ToTable("memo_notification_departments");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Token", "UserCode", "ExpiresAt", "IsRevoked");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "superadmin",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "HR_Manager",
                            Name = "HR Manager"
                        },
                        new
                        {
                            Id = 3,
                            Code = "HR",
                            Name = "HR"
                        },
                        new
                        {
                            Id = 4,
                            Code = "user",
                            Name = "User"
                        },
                        new
                        {
                            Id = 5,
                            Code = "leave_request.approval",
                            Name = "Duyệt đơn nghỉ phép"
                        },
                        new
                        {
                            Id = 6,
                            Code = "leave_request.approval_to_hr",
                            Name = "Duyệt đơn nghỉ phép tới HR"
                        },
                        new
                        {
                            Id = 7,
                            Code = "leave_request.hr_approval",
                            Name = "HR duyệt đơn nghỉ phép"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TypeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("type_leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModifiedAt = new DateTimeOffset(new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "HR",
                            Name = "Annual",
                            Note = "type_leave.annual"
                        },
                        new
                        {
                            Id = 2,
                            ModifiedAt = new DateTimeOffset(new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "HR",
                            Name = "Personal",
                            Note = "type_leave.personal"
                        },
                        new
                        {
                            Id = 3,
                            ModifiedAt = new DateTimeOffset(new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "HR",
                            Name = "Sick",
                            Note = "type_leave.sick"
                        },
                        new
                        {
                            Id = 4,
                            ModifiedAt = new DateTimeOffset(new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "HR",
                            Name = "Wedding",
                            Note = "type_leave.wedding"
                        },
                        new
                        {
                            Id = 5,
                            ModifiedAt = new DateTimeOffset(new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "HR",
                            Name = "Accident",
                            Note = "type_leave.accident"
                        },
                        new
                        {
                            Id = 6,
                            ModifiedAt = new DateTimeOffset(new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ModifiedBy = "HR",
                            Name = "Other",
                            Note = "type_leave.other"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsChangePassword")
                        .HasColumnType("tinyint");

                    b.Property<int?>("NationNality")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode", "Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfigKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode");

                    b.ToTable("user_configs");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserManageAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("user_manage_attendances");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserManageAttendanceUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCodeManage")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserCodeManage", "UserCode");

                    b.ToTable("user_manage_attendance_users");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCode", "RoleId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFileRelation", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.AttachFiles", "AttachFiles")
                        .WithMany("AttachFileRelations")
                        .HasForeignKey("AttachFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AttachFiles");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFiles", b =>
                {
                    b.Navigation("AttachFileRelations");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
