// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicePortals.Infrastructure.Data;

#nullable disable

namespace ServicePortals.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250710021716_AddColumnUserMngOrgUnitTimekeeping")]
    partial class AddColumnUserMngOrgUnitTimekeeping
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CurrentOrgUnitId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("RequesterUserCode");

                    b.HasIndex("UserId");

                    b.HasIndex("RequestStatusId", "CurrentOrgUnitId");

                    b.ToTable("application_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("attach_files");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.HistoryApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApplicationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserApproval")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCodeApproval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ApplicationFormId", "UserApproval");

                    b.ToTable("history_application_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("HaveSalary")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterUserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TimeLeaveId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TypeLeaveId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserNameWriteLeaveRequest")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("RequesterUserCode");

                    b.HasIndex("TimeLeaveId");

                    b.HasIndex("TypeLeaveId");

                    b.HasIndex("Id", "RequesterUserCode");

                    b.ToTable("leave_requests");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ApplyAllDepartment")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedByRoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCodeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("memo_notifications");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotificationDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MemoNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemoNotificationId", "DepartmentId");

                    b.ToTable("memo_notification_departments");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "LEAVE_REQUEST",
                            Name = "leave_request.create_leave_request"
                        },
                        new
                        {
                            Id = 2,
                            Description = "LEAVE_REQUEST",
                            Name = "leave_request.send_to_hr"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token");

                    b.HasIndex("UserCode");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("request_statuses");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("request_types");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SUPERADMIN",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "HR",
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Code = "IT",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 4,
                            Code = "UNION",
                            Name = "Union"
                        },
                        new
                        {
                            Id = 5,
                            Code = "USER",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("role_permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 1,
                            RoleId = 5
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TimeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("time_leaves");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TypeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("type_leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Annual",
                            Note = "type_leave.annual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Personal",
                            Note = "type_leave.personal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sick",
                            Note = "type_leave.sick"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wedding",
                            Note = "type_leave.wedding"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Accident",
                            Note = "type_leave.accident"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Other",
                            Note = "type_leave.other"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsChangePassword")
                        .HasColumnType("tinyint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "superadmin@vsvn.com.vn",
                            IsActive = (byte)1,
                            IsChangePassword = (byte)1,
                            Password = "$2a$12$GAJGsDDQUCEPfSqOLbPwmu5agSkYoaH6eUzLPJLRx2hnA89LSkiey",
                            Phone = "0987654321",
                            UserCode = "0"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode");

                    b.ToTable("user_configs");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserCode", "PermissionId");

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCode", "RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserCode = "0"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.WorkFlowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FromOrgUnitId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ToOrgUnitContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToSpecificDeptId")
                        .HasColumnType("int");

                    b.Property<int?>("ToSpecificOrgUnitId")
                        .HasColumnType("int");

                    b.Property<string>("ToSpecificUserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromOrgUnitId");

                    b.ToTable("work_flow_steps");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.RequestStatus", "RequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusId");

                    b.HasOne("ServicePortals.Domain.Entities.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId");

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFile", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("File");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.HistoryApplicationForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("HistoryApplicationForms")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany()
                        .HasForeignKey("ApplicationFormId");

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("RequesterUserCode")
                        .HasPrincipalKey("UserCode");

                    b.HasOne("ServicePortals.Domain.Entities.TimeLeave", "TimeLeave")
                        .WithMany()
                        .HasForeignKey("TimeLeaveId");

                    b.HasOne("ServicePortals.Domain.Entities.TypeLeave", "TypeLeave")
                        .WithMany()
                        .HasForeignKey("TypeLeaveId");

                    b.Navigation("ApplicationForm");

                    b.Navigation("TimeLeave");

                    b.Navigation("TypeLeave");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotificationDepartment", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.MemoNotification", "MemoNotifications")
                        .WithMany("MemoNotificationDepartments")
                        .HasForeignKey("MemoNotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MemoNotifications");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserConfig", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserConfigs")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.Navigation("HistoryApplicationForms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.Navigation("MemoNotificationDepartments");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Navigation("UserConfigs");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
