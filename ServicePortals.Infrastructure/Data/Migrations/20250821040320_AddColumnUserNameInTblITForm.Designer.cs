// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicePortals.Infrastructure.Data;

#nullable disable

namespace ServicePortals.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250821040320_AddColumnUserNameInTblITForm")]
    partial class AddColumnUserNameInTblITForm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OrgPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCodeRequestor")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserNameRequestor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrgPositionId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("UserCodeRequestor");

                    b.ToTable("application_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApprovalFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("FromOrgPositionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("PositonContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<int?>("ToOrgPositionId")
                        .HasColumnType("int");

                    b.Property<string>("ToSpecificUserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromOrgPositionId", "ToOrgPositionId");

                    b.ToTable("approval_flows");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("attach_files");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Delegation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FromUserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPermanent")
                        .HasColumnType("bit");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ToUserCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("delegations");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.HistoryApplicationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApplicationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCodeApproval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameApproval")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.ToTable("history_application_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("it_categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SERVER",
                            Name = "Server Login Id"
                        },
                        new
                        {
                            Id = 2,
                            Code = "NETWORK",
                            Name = "Network device"
                        },
                        new
                        {
                            Id = 3,
                            Code = "EMAIL",
                            Name = "Email"
                        },
                        new
                        {
                            Id = 4,
                            Code = "SOFTWARE",
                            Name = "Software Installation"
                        },
                        new
                        {
                            Id = 5,
                            Code = "ERP",
                            Name = "ERP Login Id"
                        },
                        new
                        {
                            Id = 6,
                            Code = "OTHER",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ActualCompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ApplicationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteManagerIT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("RequiredCompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TargetCompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCodeCreated")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCodeRequestor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameRequestor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("UserCodeCreated");

                    b.ToTable("it_forms");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITFormCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ITCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ITFormId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ITCategoryId");

                    b.HasIndex("ITFormId");

                    b.ToTable("it_form_categories");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte?>("HaveSalary")
                        .HasColumnType("tinyint");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeLeaveId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TypeLeaveId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCodeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCodeRequestor")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserNameRequestor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId")
                        .IsUnique()
                        .HasFilter("[ApplicationFormId] IS NOT NULL");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TimeLeaveId");

                    b.HasIndex("TypeLeaveId");

                    b.HasIndex("UserCodeRequestor");

                    b.HasIndex("Id", "UserCodeRequestor");

                    b.ToTable("leave_requests");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ApplyAllDepartment")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserCodeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFormId")
                        .IsUnique()
                        .HasFilter("[ApplicationFormId] IS NOT NULL");

                    b.HasIndex("DepartmentId");

                    b.ToTable("memo_notifications");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotificationDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MemoNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MemoNotificationId", "DepartmentId");

                    b.ToTable("memo_notification_departments");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentOrgPositionId")
                        .HasColumnType("int");

                    b.Property<string>("PositionCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrgUnitId");

                    b.ToTable("org_positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General Director",
                            OrgUnitId = 6,
                            PositionCode = "GD"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AM General Director",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "AM_GD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BD General Manager",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "BDGM"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Finance General Manage",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "FGM"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Operations General Manager",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "OGM"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Operations Manager",
                            OrgUnitId = 6,
                            ParentOrgPositionId = 1,
                            PositionCode = "OM"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Manager MIS/IT",
                            OrgUnitId = 8,
                            PositionCode = "MIS-MGR"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Staff IT",
                            OrgUnitId = 8,
                            ParentOrgPositionId = 7,
                            PositionCode = "MIS-Staff"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Manager Commercial",
                            OrgUnitId = 10,
                            PositionCode = "COM-MGR"
                        },
                        new
                        {
                            Id = 10,
                            Name = "AM Commercial",
                            OrgUnitId = 10,
                            ParentOrgPositionId = 9,
                            PositionCode = "COM-AM"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Staff Commercial",
                            OrgUnitId = 10,
                            ParentOrgPositionId = 10,
                            PositionCode = "COM-Staff"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Manager HR",
                            OrgUnitId = 9,
                            PositionCode = "HR-MGR"
                        },
                        new
                        {
                            Id = 13,
                            Name = "AM HR",
                            OrgUnitId = 9,
                            ParentOrgPositionId = 12,
                            PositionCode = "HR-AM"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Staff HR",
                            OrgUnitId = 9,
                            ParentOrgPositionId = 13,
                            PositionCode = "HR-Staff"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Manager Production",
                            OrgUnitId = 7,
                            PositionCode = "PRD-MGR"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Supervisor A_AGH",
                            OrgUnitId = 18,
                            ParentOrgPositionId = 15,
                            PositionCode = "PRD-S-AGH"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Supervisor B_BCDEF",
                            OrgUnitId = 19,
                            ParentOrgPositionId = 15,
                            PositionCode = "PRD-S-BBCDEF"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Supervisor Shift A",
                            OrgUnitId = 14,
                            ParentOrgPositionId = 15,
                            PositionCode = "PRD-S-SA"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Supervisor Shift B",
                            OrgUnitId = 17,
                            ParentOrgPositionId = 15,
                            PositionCode = "PRD-S-SB"
                        },
                        new
                        {
                            Id = 20,
                            Name = "12A_A Leader",
                            OrgUnitId = 14,
                            ParentOrgPositionId = 18,
                            PositionCode = "PRD-12AA-L"
                        },
                        new
                        {
                            Id = 21,
                            Name = "12A_A Operator",
                            OrgUnitId = 14,
                            ParentOrgPositionId = 20,
                            PositionCode = "PRD-12AA-OP"
                        },
                        new
                        {
                            Id = 22,
                            Name = "12B_A Leader",
                            OrgUnitId = 16,
                            ParentOrgPositionId = 19,
                            PositionCode = "PRD-12BA-L"
                        },
                        new
                        {
                            Id = 23,
                            Name = "12B_A Operator",
                            OrgUnitId = 16,
                            ParentOrgPositionId = 23,
                            PositionCode = "PRD-12BA-OP"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Technician A_AGH",
                            OrgUnitId = 18,
                            ParentOrgPositionId = 16,
                            PositionCode = "PRD-T-AAH"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Technician B_BCDEF",
                            OrgUnitId = 19,
                            ParentOrgPositionId = 17,
                            PositionCode = "PRD-T-BCDEF"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentOrgUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("org_units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "VS Industry VietNam",
                            UnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business Development",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finance & Admin",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Operations",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "VS Technology",
                            ParentOrgUnitId = 1,
                            UnitId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "General Manager",
                            ParentOrgUnitId = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Production",
                            ParentOrgUnitId = 4,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "MIS",
                            ParentOrgUnitId = 1,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "HR",
                            ParentOrgUnitId = 3,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Commercial",
                            ParentOrgUnitId = 4,
                            UnitId = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "12A_A",
                            ParentOrgUnitId = 6,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 15,
                            Name = "12A_B",
                            ParentOrgUnitId = 6,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 16,
                            Name = "12B_A",
                            ParentOrgUnitId = 6,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 17,
                            Name = "12B_H",
                            ParentOrgUnitId = 6,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kỹ thuật A_AGH",
                            ParentOrgUnitId = 6,
                            UnitId = 4
                        },
                        new
                        {
                            Id = 19,
                            Name = "Kỹ thuật B_BCDEF",
                            ParentOrgUnitId = 6,
                            UnitId = 4
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Group = "TIME_KEEPING",
                            Name = "time_keeping.mng_time_keeping"
                        },
                        new
                        {
                            Id = 2,
                            Group = "LEAVE_REQUEST",
                            Name = "leave_request.create_multiple_leave_request"
                        },
                        new
                        {
                            Id = 3,
                            Group = "LEAVE_REQUEST",
                            Name = "leave_request.hr_management_leave_request"
                        },
                        new
                        {
                            Id = 4,
                            Group = "MEMO_NOTIFICATION",
                            Name = "memo_notification.create"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Thấp",
                            NameE = "Low"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trung bình",
                            NameE = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cao",
                            NameE = "High"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token");

                    b.HasIndex("UserCode");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("request_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chờ duyệt",
                            NameE = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Đang xử lý",
                            NameE = "IN_PROCESS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hoàn thành",
                            NameE = "COMPLETED"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chờ HR",
                            NameE = "WAIT_HR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Từ chối",
                            NameE = "REJECTED"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Duyệt cuối cùng",
                            NameE = "FINAL_APPROVAL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Đã giao",
                            NameE = "ASSIGNED"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("request_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nghỉ phép",
                            NameE = "Leave request"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chấm công",
                            NameE = "Time Keeping"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Thông báo",
                            NameE = "Memo Notification"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Form IT",
                            NameE = "Form IT"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SUPERADMIN",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Code = "HR",
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Code = "IT",
                            Name = "IT"
                        },
                        new
                        {
                            Id = 4,
                            Code = "UNION",
                            Name = "Union"
                        },
                        new
                        {
                            Id = 5,
                            Code = "USER",
                            Name = "User"
                        },
                        new
                        {
                            Id = 6,
                            Code = "GM",
                            Name = "GM"
                        },
                        new
                        {
                            Id = 7,
                            Code = "HR_MANAGER",
                            Name = "HR_Manager"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.SystemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaxValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("system_configs");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TimeAttendanceEditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Datetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsSentToHR")
                        .HasColumnType("bit");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCodeUpdated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("time_attendance_edit_histories");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TimeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("time_leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cả Ngày",
                            NameE = "All Day"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buổi sáng",
                            NameE = "Morning"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Buổi chiều",
                            NameE = "Afternoon"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.TypeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("type_leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AL",
                            Name = "Nghỉ Phép Năm",
                            NameE = "Annual Leave"
                        },
                        new
                        {
                            Id = 2,
                            Code = "NPL",
                            Name = "Nghỉ Việc Cá Nhân",
                            NameE = "Unpaid Leave"
                        },
                        new
                        {
                            Id = 3,
                            Code = "MC",
                            Name = "Nghỉ Ốm",
                            NameE = "Sick Leave"
                        },
                        new
                        {
                            Id = 4,
                            Code = "ML",
                            Name = "Nghỉ Cưới",
                            NameE = "Wedding Leave"
                        },
                        new
                        {
                            Id = 5,
                            Code = "ACC",
                            Name = "Nghỉ TNLĐ",
                            NameE = "Accident Leave"
                        },
                        new
                        {
                            Id = 6,
                            Code = "PL",
                            Name = "Nghỉ vợ sinh",
                            NameE = "Paternity Leave"
                        },
                        new
                        {
                            Id = 7,
                            Code = "MAT",
                            Name = "Nghỉ đẻ",
                            NameE = "Maternity Leave"
                        },
                        new
                        {
                            Id = 8,
                            Code = "UL",
                            Name = "Nghỉ bù",
                            NameE = "Compensatory Leave"
                        },
                        new
                        {
                            Id = 9,
                            Code = "COMP",
                            Name = "Nghỉ tang lễ",
                            NameE = "Funeral Leave"
                        },
                        new
                        {
                            Id = 10,
                            Code = "Wo",
                            Name = "Làm ở ngoài",
                            NameE = "Working Outside"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Company"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manage Department"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Department"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Team"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsChangePassword")
                        .HasColumnType("tinyint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "superadmin@vsvn.com.vn",
                            IsActive = (byte)1,
                            IsChangePassword = (byte)1,
                            Password = "$2a$12$GAJGsDDQUCEPfSqOLbPwmu5agSkYoaH6eUzLPJLRx2hnA89LSkiey",
                            Phone = "0999999999",
                            UserCode = "0"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserCode");

                    b.ToTable("user_configs");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserMngOrgUnitId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ManagementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("user_mng_org_unit_id");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserCode", "PermissionId");

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCode", "RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserCode = "0"
                        });
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.OrgPosition", "OrgPosition")
                        .WithMany()
                        .HasForeignKey("OrgPositionId");

                    b.HasOne("ServicePortals.Domain.Entities.RequestStatus", "RequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusId");

                    b.HasOne("ServicePortals.Domain.Entities.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId");

                    b.Navigation("OrgPosition");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.AttachFile", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("File");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.HistoryApplicationForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany("HistoryApplicationForms")
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationForm");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITForm", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithMany()
                        .HasForeignKey("ApplicationFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.User", "UserRelationCreated")
                        .WithMany()
                        .HasForeignKey("UserCodeCreated")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationForm");

                    b.Navigation("OrgUnit");

                    b.Navigation("Priority");

                    b.Navigation("UserRelationCreated");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITFormCategory", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ITCategory", "ITCategory")
                        .WithMany()
                        .HasForeignKey("ITCategoryId");

                    b.HasOne("ServicePortals.Domain.Entities.ITForm", "ITForm")
                        .WithMany("ItFormCategories")
                        .HasForeignKey("ITFormId");

                    b.Navigation("ITCategory");

                    b.Navigation("ITForm");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithOne("Leave")
                        .HasForeignKey("ServicePortals.Domain.Entities.LeaveRequest", "ApplicationFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.TimeLeave", "TimeLeave")
                        .WithMany()
                        .HasForeignKey("TimeLeaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.TypeLeave", "TypeLeave")
                        .WithMany()
                        .HasForeignKey("TypeLeaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserCodeRequestor")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationForm");

                    b.Navigation("OrgUnit");

                    b.Navigation("TimeLeave");

                    b.Navigation("TypeLeave");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.ApplicationForm", "ApplicationForm")
                        .WithOne("MemoNotification")
                        .HasForeignKey("ServicePortals.Domain.Entities.MemoNotification", "ApplicationFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationForm");

                    b.Navigation("OrgUnit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotificationDepartment", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.MemoNotification", "MemoNotifications")
                        .WithMany("MemoNotificationDepartments")
                        .HasForeignKey("MemoNotificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MemoNotifications");

                    b.Navigation("OrgUnit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgPosition", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.OrgUnit", "OrgUnit")
                        .WithMany()
                        .HasForeignKey("OrgUnitId");

                    b.Navigation("OrgUnit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.OrgUnit", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserConfig", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserConfigs")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ServicePortals.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServicePortals.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("UserCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ApplicationForm", b =>
                {
                    b.Navigation("HistoryApplicationForms");

                    b.Navigation("Leave");

                    b.Navigation("MemoNotification");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.ITForm", b =>
                {
                    b.Navigation("ItFormCategories");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.MemoNotification", b =>
                {
                    b.Navigation("MemoNotificationDepartments");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ServicePortals.Domain.Entities.User", b =>
                {
                    b.Navigation("UserConfigs");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
