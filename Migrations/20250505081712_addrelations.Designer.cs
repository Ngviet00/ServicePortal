// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicePortal.Infrastructure.Data;

#nullable disable

namespace ServicePortal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250505081712_addrelations")]
    partial class addrelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicePortal.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("note");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("Id", "ParentId");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT/MIS",
                            Note = "department.IT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR",
                            Note = "department.HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sản xuất",
                            Note = "department.production"
                        });
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Deparment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deparment");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("from_date");

                    b.Property<bool?>("HaveSalary")
                        .HasColumnType("bit")
                        .HasColumnName("have_salary");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("NameRegister")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name_register");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<byte?>("TimeLeave")
                        .HasColumnType("tinyint")
                        .HasColumnName("time_leave");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("to_date");

                    b.Property<byte?>("TypeLeave")
                        .HasColumnType("tinyint")
                        .HasColumnName("type_leave");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_code");

                    b.Property<string>("UserCodeRegister")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_code_register");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "UserCode");

                    b.ToTable("leave_requests");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.LeaveRequestStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("approved_by");

                    b.Property<Guid?>("LeaveRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("leave_request_id");

                    b.Property<string>("LevelApproval")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("level_approval");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("note");

                    b.Property<byte?>("StatusStep")
                        .HasColumnType("tinyint")
                        .HasColumnName("status_step");

                    b.Property<string>("UserCodeApprover")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_code_approver");

                    b.HasKey("Id");

                    b.HasIndex("LeaveRequestId");

                    b.HasIndex("Id", "LeaveRequestId", "UserCodeApprover", "StatusStep");

                    b.ToTable("leave_request_steps");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("expires_at");

                    b.Property<bool?>("IsRevoked")
                        .HasColumnType("bit")
                        .HasColumnName("is_revoked");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("token");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_code");

                    b.HasKey("Id");

                    b.HasIndex("Token", "UserCode", "ExpiresAt", "IsRevoked");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 4,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.TypeLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ModifiedAt")
                        .HasMaxLength(200)
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.ToTable("type_leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModifiedAt = new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "HR",
                            Name = "Annual",
                            Note = "type_leave.annual"
                        },
                        new
                        {
                            Id = 2,
                            ModifiedAt = new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "HR",
                            Name = "Personal",
                            Note = "type_leave.personal"
                        },
                        new
                        {
                            Id = 3,
                            ModifiedAt = new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "HR",
                            Name = "Sick",
                            Note = "type_leave.sick"
                        },
                        new
                        {
                            Id = 4,
                            ModifiedAt = new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "HR",
                            Name = "Wedding",
                            Note = "type_leave.wedding"
                        },
                        new
                        {
                            Id = 5,
                            ModifiedAt = new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "HR",
                            Name = "Accident",
                            Note = "type_leave.accident"
                        },
                        new
                        {
                            Id = 6,
                            ModifiedAt = new DateTime(2025, 5, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "HR",
                            Name = "Other",
                            Note = "type_leave.other"
                        });
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateJoinCompany")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_join_company");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("level");

                    b.Property<string>("LevelParent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("level_parent");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("position");

                    b.Property<byte?>("Sex")
                        .HasColumnType("tinyint")
                        .HasColumnName("sex");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Code", "Email", "Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_code");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserCode", "PermissionId");

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_code");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserCode", "RoleId", "DepartmentId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("ServicePortal.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.LeaveRequestStep", b =>
                {
                    b.HasOne("ServicePortal.Domain.Entities.LeaveRequest", null)
                        .WithMany("LeaveRequestSteps")
                        .HasForeignKey("LeaveRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ServicePortal.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId");

                    b.HasOne("ServicePortal.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.User", b =>
                {
                    b.HasOne("ServicePortal.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("ServicePortal.Domain.Entities.Permission", "Permission")
                        .WithMany("UserPermission")
                        .HasForeignKey("PermissionId");

                    b.HasOne("ServicePortal.Domain.Entities.User", "User")
                        .WithMany("UserPermission")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("Code");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ServicePortal.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ServicePortal.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("ServicePortal.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserCode")
                        .HasPrincipalKey("Code");

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.LeaveRequest", b =>
                {
                    b.Navigation("LeaveRequestSteps");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermission");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ServicePortal.Domain.Entities.User", b =>
                {
                    b.Navigation("UserPermission");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
